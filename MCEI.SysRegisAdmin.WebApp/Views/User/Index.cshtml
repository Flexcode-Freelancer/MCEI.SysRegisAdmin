@using MCEI.SysRegisAdmin.EN.Role___EN
@model IEnumerable<MCEI.SysRegisAdmin.EN.User___EN.User>

@{
    ViewData["Title"] = "Usuarios";
    List<Role> roles = ViewBag.Roles as List<Role>;
}

<h1>Mantenimiento Para Usuarios</h1>
<hr />
<form asp-action="Index">
    <div>
        <label>Nombre</label>
        <input type="text" name="Name" placeholder="Ingresar" />
    </div>
    <div>
        <label>Apellido</label>
        <input type="text" name="LastName" placeholder="Ingresar" />
    </div>
    <div>
        <label>Correo Electronico</label>
        <input type="text" name="Email" placeholder="Ingresar" />
    </div>
    <div>
        <label>Estatus</label>
        <select name="Status">
            <option selected value="0">Seleccionar</option>
            <option value="1">Activo</option>
            <option value="2">Inactivo</option>
        </select>
    </div>
    <div>
        <label>Fecha De Registro</label>
        <input type="date" name="RegistrationDate"/>
    </div>
    <div>
        <label>Rol</label>
        <select name="IdRole">
            <option selected value="0">Seleccionar</option>
            @foreach (var item in roles!)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
    </div>
    <div>
        <input type="submit" value="Buscar Usuario"/> |
        <a asp-action="Create">Crear Nuevo Usuario</a>
    </div>
</form>
<h2>Tabla de Resultados</h2>
<table id="ResultData" class="hover" style="width:100%">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Email)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Status)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IdRole)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RegistrationDate)
            </th>
            <th>Acciones</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>
                @if (item.Status == 1)
                {
                    <td>Activo</td>
                }
                else if (item.Status == 2)
                {
                    <td>Inactivo</td>
                }
                else
                {
                    <td></td>
                }
                <td>
                    @Html.DisplayFor(modelItem => item.Role!.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RegistrationDate)
                </td>
                <td>
                    @Html.ActionLink("Modificar", "Edit", new { id = item.Id }, new { @class = "" }) |
                    @Html.ActionLink("Detalles", "Details", new { id = item.Id }, new { @class = "" }) |
                    @Html.ActionLink("Eliminar", "Delete", new { id = item.Id }, new { @class = "" })
                </td>
            </tr>
        }
    </tbody>
</table>

@section Scripts {
    <script>

        new DataTable('#ResultData', {
            info: false,
            order: false,
            Response: true,
            pagingType: 'simple_numbers',
            language: {
                search: 'Busqueda Rapida :',
                searchPlaceholder: 'Ingresar',
                lengthMenu: '_MENU_ Mostrar',
                emptyTable: 'No Hay Datos Que Coincidan Con Su Criterio De Búsqueda.',
                zeroRecords: 'No Existen Registros Segun La Busqueda',
                processing: 'Procesando...',
            }
        });

        const Toast = Swal.mixin({
            toast: true,
            position: "top-end",
            showConfirmButton: false,
            timer: 8000,
            timerProgressBar: true,
            didOpen: (toast) => {
                toast.addEventListener('mouseenter', Swal.stopTimer);
                toast.addEventListener('mouseleave', Swal.resumeTimer);
            }
        });

        // Comprobar si hay mensajes de éxito y mostrar notificaciones del sistema
        const successMessages = {
            Creado: '@TempData["SuccessMessageCreate"]',
            Modificado: '@TempData["SuccessMessageUpdate"]',
            Eliminado: '@TempData["SuccessMessageDelete"]'
        };

        for (const messageType in successMessages) {
            const message = successMessages[messageType];
            if (message) {
                Toast.fire({
                    icon: "success",
                    title: `¡${messageType} Exitosamente!`,
                    text: message
                });
            }
        }
    </script>
}