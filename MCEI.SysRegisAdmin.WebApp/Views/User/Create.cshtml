@using MCEI.SysRegisAdmin.EN.Role___EN
@model MCEI.SysRegisAdmin.EN.User___EN.User

@{
    ViewData["Title"] = "Crear Usuario";
    List<Role> roles = ViewBag.Roles as List<Role>;
}

<h1>Crear Nuevo Usuario</h1>
<span>@ViewBag.Error</span>
<hr />
<form id="Form" asp-action="Create" onsubmit="CreateRecord(event)">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div>
        <label asp-for="Name"></label>
        <span>*</span>
        <input asp-for="Name" placeholder="Ingresar" />
        <span asp-validation-for="Name"></span>
    </div>
    <div>
        <label asp-for="LastName"></label>
        <span>*</span>
        <input asp-for="LastName" placeholder="Ingresar" />
        <span asp-validation-for="LastName"></span>
    </div>
    <div>
        <label asp-for="Status"></label>
        <span>*</span>
        <select asp-for="Status">
            <option value="">Seleccionar</option>
            <option selected value="1">Activo</option>
            <option value="2">Inactivo</option>
        </select>
        <span asp-validation-for="Status"></span>
    </div>
    <div>
        <label asp-for="Email"></label>
        <span>*</span>
        <input asp-for="Email" placeholder="Ingresar"/>
        <span asp-validation-for="Email"></span>
    </div>
    <div>
        <label asp-for="Password"></label>
        <span>*</span>
        <input asp-for="Password" placeholder="XXXXXXXX" />
        <span asp-validation-for="Password"></span>
    </div>
    <div>
        <label asp-for="ConfirmPassword_Aux"></label>
        <span>*</span>
        <input asp-for="ConfirmPassword_Aux" placeholder="XXXXXXXX" />
        <span asp-validation-for="ConfirmPassword_Aux"></span>
    </div>
    <div>
        <label asp-for="IdRole"></label>
        <span>*</span>
        <select asp-for="IdRole">
            @foreach (var item in roles!)
            {
                <option value="@item.Id">@item.Name</option>
            }
        </select>
        <span asp-validation-for="IdRole"></span>
    </div>

    <div>
        <input type="submit" value="Guardar Usuario"/>
        <a asp-action="Index">Regresar A La Lista</a>
    </div>
</form>

@section Scripts {
    <script>
        function showErrorAlert(message) {
            Swal.fire({
                title: 'Error',
                text: message,
                icon: 'error'
            });
        }
        // Mostrar alerta de ViewBag.Error si es necesario
        @if (!string.IsNullOrEmpty(ViewBag.Error))
        {
            @:showErrorAlert('@ViewBag.Error');
        }

        // En este caso se deja automatizado el correo electronico ya que son de 5 a 10 usuarios oficiales que tendra el sistema,
        // de lo contrario el usuario se dejaria customizable segunel criterio y estandar de la empresa u organizacion

        // Función para actualizar el campo de correo electrónico
        function updateEmail() {
            var name = document.getElementsByName('Name')[0].value;
            var lastName = document.getElementsByName('LastName')[0].value;

            // Dividir los valores de nombre y apellido por espacios y tomar solo el primer nombre y primer apellido
            var firstName = name.split(' ')[0];  // Toma el primer nombre
            var firstLastName = lastName.split(' ')[0];  // Toma el primer apellido
            var email = firstName + firstLastName + '@@elimizalco.com'; // Formatear el correo electrónico

            document.getElementsByName('Email')[0].value = email.toLowerCase(); // Actualizar el campo de correo electrónico
        }

        // Añadir controladores de eventos para los campos de nombre y apellido
        document.getElementsByName('Name')[0].addEventListener('input', updateEmail);
        document.getElementsByName('LastName')[0].addEventListener('input', updateEmail);

        // Función para validar los campos Name y LastName antes de enviar el formulario
        function validateNameOrLastName(input) {
            const regex = /^[A-ZÑa-zñáéíóúÁÉÍÓÚ. ]+$/;

            if (!regex.test(input.value.trim())) {
                // Si el valor no cumple con la expresión regular, mostrar alerta de error
                Swal.fire({
                    title: 'Error De Formato',
                    text: 'Por favor, Ingresa Unicamente Letras En Los Campos Nombre y Apellido.',
                    icon: 'error'
                });
                return false; // Retorna falso si la validación falla
            }

            return true; // Retorna verdadero si la validación pasa
        }

        // Función para manejar el evento de envío de formulario
        function CreateRecord(e) {
            e.preventDefault(); // Prevenir el envío del formulario

            const form = document.getElementById('Form');

            // Validar los campos Name y LastName
            const nameInput = document.getElementsByName('Name')[0];
            const lastNameInput = document.getElementsByName('LastName')[0];

            if (!validateNameOrLastName(nameInput) || !validateNameOrLastName(lastNameInput)) {
                // Si alguna validación falla, detener la ejecución
                return;
            }

            // Mostrar alerta de confirmación antes de enviar el formulario
            Swal.fire({
                title: '¿Guardar Nuevo Registro?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonText: 'Sí, Guardar Registro',
                cancelButtonText: 'Cancelar'
            }).then((result) => {
                if (result.isConfirmed) {
                    form.submit(); // Enviar el formulario si se confirma la acción
                }
            });
        }

        // Añadir evento de envío al formulario
        const form = document.getElementById('Form');
        if (form) {
            form.addEventListener('submit', CreateRecord);
        }
    </script>
}